package com.shine.mglm.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shine.mglm.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Times = new Property(3, String.class, "times", false, "TIMES");
        public final static Property Rebate = new Property(4, String.class, "rebate", false, "REBATE");
        public final static Property Last_time = new Property(5, String.class, "last_time", false, "LAST_TIME");
        public final static Property Current_amount = new Property(6, String.class, "current_amount", false, "CURRENT_AMOUNT");
        public final static Property Total_amount = new Property(7, String.class, "total_amount", false, "TOTAL_AMOUNT");
        public final static Property ArrivalTimes = new Property(8, String.class, "arrivalTimes", false, "ARRIVAL_TIMES");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userId
                "\"NAME\" TEXT," + // 1: name
                "\"PHONE\" TEXT NOT NULL ," + // 2: phone
                "\"TIMES\" TEXT," + // 3: times
                "\"REBATE\" TEXT," + // 4: rebate
                "\"LAST_TIME\" TEXT," + // 5: last_time
                "\"CURRENT_AMOUNT\" TEXT," + // 6: current_amount
                "\"TOTAL_AMOUNT\" TEXT," + // 7: total_amount
                "\"ARRIVAL_TIMES\" TEXT);"); // 8: arrivalTimes
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindString(3, entity.getPhone());
 
        String times = entity.getTimes();
        if (times != null) {
            stmt.bindString(4, times);
        }
 
        String rebate = entity.getRebate();
        if (rebate != null) {
            stmt.bindString(5, rebate);
        }
 
        String last_time = entity.getLast_time();
        if (last_time != null) {
            stmt.bindString(6, last_time);
        }
 
        String current_amount = entity.getCurrent_amount();
        if (current_amount != null) {
            stmt.bindString(7, current_amount);
        }
 
        String total_amount = entity.getTotal_amount();
        if (total_amount != null) {
            stmt.bindString(8, total_amount);
        }
 
        String arrivalTimes = entity.getArrivalTimes();
        if (arrivalTimes != null) {
            stmt.bindString(9, arrivalTimes);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindString(3, entity.getPhone());
 
        String times = entity.getTimes();
        if (times != null) {
            stmt.bindString(4, times);
        }
 
        String rebate = entity.getRebate();
        if (rebate != null) {
            stmt.bindString(5, rebate);
        }
 
        String last_time = entity.getLast_time();
        if (last_time != null) {
            stmt.bindString(6, last_time);
        }
 
        String current_amount = entity.getCurrent_amount();
        if (current_amount != null) {
            stmt.bindString(7, current_amount);
        }
 
        String total_amount = entity.getTotal_amount();
        if (total_amount != null) {
            stmt.bindString(8, total_amount);
        }
 
        String arrivalTimes = entity.getArrivalTimes();
        if (arrivalTimes != null) {
            stmt.bindString(9, arrivalTimes);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // times
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rebate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // last_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // current_amount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // total_amount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // arrivalTimes
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.getString(offset + 2));
        entity.setTimes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRebate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLast_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCurrent_amount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTotal_amount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setArrivalTimes(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
